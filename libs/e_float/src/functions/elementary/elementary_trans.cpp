
//          Copyright Christopher Kormanyos 1999 - 2021.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// This work is based on an earlier work:
// "Algorithm 910: A Portable C++ Multiple-Precision System for Special-Function Calculations",
// in ACM TOMS, {VOL 37, ISSUE 4, (February 2011)} (C) ACM, 2011. http://doi.acm.org/10.1145/1916461.1916469

#include <array>
#include <map>
#include <numeric>
#include <vector>

#include <e_float/e_float_functions.h>
#include <e_float/detail/e_float_detail_pown_template.h>

#include <utility/util_lexical_cast.h>

namespace ElementaryTrans_Series
{
  static e_float rootn_inv(const e_float& x, const std::int32_t p);
}

e_float ef::pow2(const std::int64_t p)
{
  if(p < -127L)
  {
    return ef::pow2(static_cast<std::int64_t>(-p)).calculate_inv();
  }
  else if((p >= -127L) && (p <= 127L))
  {
    switch(p)
    {
      // Create a static const table of p^2 for the 255 entries
      // in the range -127 <= p <= 127.

      default:
      case -127L: { return e_float({       58, 77471754, 11143753, 98436826, 86111228, 38909332, 77838604, 37607543, 75853139, 20862972, 73635864, 25781250 }, -40); }
      case -126L: { return e_float({      117, 54943508, 22287507, 96873653, 72222456, 77818665, 55677208, 75215087, 51706278, 41725945, 47271728, 51562500 }, -40); }
      case -125L: { return e_float({      235,  9887016, 44575015, 93747307, 44444913, 55637331, 11354417, 50430175,  3412556, 83451890, 94543457,  3125000 }, -40); }
      case -124L: { return e_float({      470, 19774032, 89150031, 87494614, 88889827, 11274662, 22708835,   860350,  6825113, 66903781, 89086914,  6250000 }, -40); }
      case -123L: { return e_float({      940, 39548065, 78300063, 74989229, 77779654, 22549324, 45417670,  1720700, 13650227, 33807563, 78173828, 12500000 }, -40); }
      case -122L: { return e_float({     1880, 79096131, 56600127, 49978459, 55559308, 45098648, 90835340,  3441400, 27300454, 67615127, 56347656, 25000000 }, -40); }
      case -121L: { return e_float({     3761, 58192263, 13200254, 99956919, 11118616, 90197297, 81670680,  6882800, 54600909, 35230255, 12695312, 50000000 }, -40); }
      case -120L: { return e_float({               7523, 16384526, 26400509, 99913838, 22237233, 80394595, 63341360, 13765601,  9201818, 70460510, 25390625 }, -40); }
      case -119L: { return e_float({              15046, 32769052, 52801019, 99827676, 44474467, 60789191, 26682720, 27531202, 18403637, 40921020, 50781250 }, -40); }
      case -118L: { return e_float({              30092, 65538105,  5602039, 99655352, 88948935, 21578382, 53365440, 55062404, 36807274, 81842041,  1562500 }, -40); }
      case -117L: { return e_float({              60185, 31076210, 11204079, 99310705, 77897870, 43156765,  6730881, 10124808, 73614549, 63684082,  3125000 }, -40); }
      case -116L: { return e_float({             120370, 62152420, 22408159, 98621411, 55795740, 86313530, 13461762, 20249617, 47229099, 27368164,  6250000 }, -40); }
      case -115L: { return e_float({             240741, 24304840, 44816319, 97242823, 11591481, 72627060, 26923524, 40499234, 94458198, 54736328, 12500000 }, -40); }
      case -114L: { return e_float({             481482, 48609680, 89632639, 94485646, 23182963, 45254120, 53847048, 80998469, 88916397,  9472656, 25000000 }, -40); }
      case -113L: { return e_float({             962964, 97219361, 79265279, 88971292, 46365926, 90508241,  7694097, 61996939, 77832794, 18945312, 50000000 }, -40); }
      case -112L: { return e_float({                      1925929, 94438723, 58530559, 77942584, 92731853, 81016482, 15388195, 23993879, 55665588, 37890625 }, -40); }
      case -111L: { return e_float({                      3851859, 88877447, 17061119, 55885169, 85463707, 62032964, 30776390, 47987759, 11331176, 75781250 }, -40); }
      case -110L: { return e_float({                      7703719, 77754894, 34122239, 11770339, 70927415, 24065928, 61552780, 95975518, 22662353, 51562500 }, -40); }
      case -109L: { return e_float({                     15407439, 55509788, 68244478, 23540679, 41854830, 48131857, 23105561, 91951036, 45324707,  3125000 }, -40); }
      case -108L: { return e_float({                     30814879, 11019577, 36488956, 47081358, 83709660, 96263714, 46211123, 83902072, 90649414,  6250000 }, -40); }
      case -107L: { return e_float({                     61629758, 22039154, 72977912, 94162717, 67419321, 92527428, 92422247, 67804145, 81298828, 12500000 }, -40); }
      case -106L: { return e_float({                  1, 23259516, 44078309, 45955825, 88325435, 34838643, 85054857, 84844495, 35608291, 62597656, 25000000 }, -32); }
      case -105L: { return e_float({                  2, 46519032, 88156618, 91911651, 76650870, 69677287, 70109715, 69688990, 71216583, 25195312, 50000000 }, -32); }
      case -104L: { return e_float({                            4, 93038065, 76313237, 83823303, 53301741, 39354575, 40219431, 39377981, 42433166, 50390625 }, -32); }
      case -103L: { return e_float({                            9, 86076131, 52626475, 67646607,  6603482, 78709150, 80438862, 78755962, 84866333,   781250 }, -32); }
      case -102L: { return e_float({                           19, 72152263,  5252951, 35293214, 13206965, 57418301, 60877725, 57511925, 69732666,  1562500 }, -32); }
      case -101L: { return e_float({                           39, 44304526, 10505902, 70586428, 26413931, 14836603, 21755451, 15023851, 39465332,  3125000 }, -32); }
      case -100L: { return e_float({                           78, 88609052, 21011805, 41172856, 52827862, 29673206, 43510902, 30047702, 78930664,  6250000 }, -32); }
      case  -99L: { return e_float({                          157, 77218104, 42023610, 82345713,  5655724, 59346412, 87021804, 60095405, 57861328, 12500000 }, -32); }
      case  -98L: { return e_float({                          315, 54436208, 84047221, 64691426, 11311449, 18692825, 74043609, 20190811, 15722656, 25000000 }, -32); }
      case  -97L: { return e_float({                                   6310, 88724176, 80944432, 93828522, 26228983, 73856514, 80872184,  3816223, 14453125 }, -32); }
      case  -96L: { return e_float({                                   1262, 17744835, 36188886, 58765704, 45245796, 74771302, 96174436, 80763244, 62890625 }, -32); }
      case  -95L: { return e_float({                                   2524, 35489670, 72377773, 17531408, 90491593, 49542605, 92348873, 61526489, 25781250 }, -32); }
      case  -94L: { return e_float({                                   5048, 70979341, 44755546, 35062817, 80983186, 99085211, 84697747, 23052978, 51562500 }, -32); }
      case  -93L: { return e_float({                                  10097, 41958682, 89511092, 70125635, 61966373, 98170423, 69395494, 46105957,  3125000 }, -32); }
      case  -92L: { return e_float({                                  20194, 83917365, 79022185, 40251271, 23932747, 96340847, 38790988, 92211914,  6250000 }, -32); }
      case  -91L: { return e_float({                                  40389, 67834731, 58044370, 80502542, 47865495, 92681694, 77581977, 84423828, 12500000 }, -32); }
      case  -90L: { return e_float({                                  80779, 35669463, 16088741, 61005084, 95730991, 85363389, 55163955, 68847656, 25000000 }, -32); }
      case  -89L: { return e_float({                                 161558, 71338926, 32177483, 22010169, 91461983, 70726779, 10327911, 37695312, 50000000 }, -32); }
      case  -88L: { return e_float({                                           323117, 42677852, 64354966, 44020339, 82923967, 41453558, 20655822, 75390625 }, -32); }
      case  -87L: { return e_float({                                           646234, 85355705, 28709932, 88040679, 65847934, 82907116, 41311645, 50781250 }, -32); }
      case  -86L: { return e_float({                                          1292469, 70711410, 57419865, 76081359, 31695869, 65814232, 82623291,  1562500 }, -32); }
      case  -85L: { return e_float({                                          2584939, 41422821, 14839731, 52162718, 63391739, 31628465, 65246582,  3125000 }, -32); }
      case  -84L: { return e_float({                                          5169878, 82845642, 29679463,  4325437, 26783478, 63256931, 30493164,  6250000 }, -32); }
      case  -83L: { return e_float({                                         10339757, 65691284, 59358926,  8650874, 53566957, 26513862, 60986328, 12500000 }, -32); }
      case  -82L: { return e_float({                                         20679515, 31382569, 18717852, 17301749,  7133914, 53027725, 21972656, 25000000 }, -32); }
      case  -81L: { return e_float({                                         41359030, 62765138, 37435704, 34603498, 14267829,  6055450, 43945312, 50000000 }, -32); }
      case  -80L: { return e_float({                                                   82718061, 25530276, 74871408, 69206996, 28535658, 12110900, 87890625 }, -32); }
      case  -79L: { return e_float({                                                1, 65436122, 51060553, 49742817, 38413992, 57071316, 24221801, 75781250 }, -24); }
      case  -78L: { return e_float({                                                3, 30872245,  2121106, 99485634, 76827985, 14142632, 48443603, 51562500 }, -24); }
      case  -77L: { return e_float({                                                6, 61744490,  4242213, 98971269, 53655970, 28285264, 96887207,  3125000 }, -24); }
      case  -76L: { return e_float({                                               13, 23488980,  8484427, 97942539,  7311940, 56570529, 93774414,  6250000 }, -24); }
      case  -75L: { return e_float({                                               26, 46977960, 16968855, 95885078, 14623881, 13141059, 87548828, 12500000 }, -24); }
      case  -74L: { return e_float({                                               52, 93955920, 33937711, 91770156, 29247762, 26282119, 75097656, 25000000 }, -24); }
      case  -73L: { return e_float({                                              105, 87911840, 67875423, 83540312, 58495524, 52564239, 50195312, 50000000 }, -24); }
      case  -72L: { return e_float({                                                        211, 75823681, 35750847, 67080625, 16991049,  5128479,   390625 }, -24); }
      case  -71L: { return e_float({                                                        423, 51647362, 71501695, 34161250, 33982098, 10256958,   781250 }, -24); }
      case  -70L: { return e_float({                                                        847,  3294725, 43003390, 68322500, 67964196, 20513916,  1562500 }, -24); }
      case  -69L: { return e_float({                                                       1694,  6589450, 86006781, 36645001, 35928392, 41027832,  3125000 }, -24); }
      case  -68L: { return e_float({                                                       3388, 13178901, 72013562, 73290002, 71856784, 82055664,  6250000 }, -24); }
      case  -67L: { return e_float({                                                       6776, 26357803, 44027125, 46580005, 43713569, 64111328, 12500000 }, -24); }
      case  -66L: { return e_float({                                                      13552, 52715606, 88054250, 93160010, 87427139, 28222656, 25000000 }, -24); }
      case  -65L: { return e_float({                                                      27105,  5431213, 76108501, 86320021, 74854278, 56445312, 50000000 }, -24); }
      case  -64L: { return e_float({                                                                54210, 10862427, 52217003, 72640043, 49708557, 12890625 }, -24); }
      case  -63L: { return e_float({                                                               108420, 21724855,  4434007, 45280086, 99417114, 25781250 }, -24); }
      case  -62L: { return e_float({                                                               216840, 43449710,  8868014, 90560173, 98834228, 51562500 }, -24); }
      case  -61L: { return e_float({                                                               433680, 86899420, 17736029, 81120347, 97668457,  3125000 }, -24); }
      case  -60L: { return e_float({                                                               867361, 73798840, 35472059, 62240695, 95336914,  6250000 }, -24); }
      case  -59L: { return e_float({                                                              1734723, 47597680, 70944119, 24481391, 90673828, 12500000 }, -24); }
      case  -58L: { return e_float({                                                              3469446, 95195361, 41888238, 48962783, 81347656, 25000000 }, -24); }
      case  -57L: { return e_float({                                                              6938893, 90390722, 83776476, 97925567, 62695312, 50000000 }, -24); }
      case  -56L: { return e_float({                                                                       13877787, 80781445, 67552953, 95851135, 25390625 }, -24); }
      case  -55L: { return e_float({                                                                       27755575, 61562891, 35105907, 91702270, 50781250 }, -24); }
      case  -54L: { return e_float({                                                                       55511151, 23125782, 70211815, 83404541,  1562500 }, -24); }
      case  -53L: { return e_float({                                                                    1, 11022302, 46251565, 40423631, 66809082,  3125000 }, -16); }
      case  -52L: { return e_float({                                                                    2, 22044604, 92503130, 80847263, 33618164,  6250000 }, -16); }
      case  -51L: { return e_float({                                                                    4, 44089209, 85006261, 61694526, 67236328, 12500000 }, -16); }
      case  -50L: { return e_float({                                                                    8, 88178419, 70012523, 23389053, 34472656, 25000000 }, -16); }
      case  -49L: { return e_float({                                                                   17, 76356839, 40025046, 46778106, 68945312, 50000000 }, -16); }
      case  -48L: { return e_float({                                                                             35, 52713678, 80050092, 93556213, 37890625 }, -16); }
      case  -47L: { return e_float({                                                                             71,  5427357, 60100185, 87112426, 75781250 }, -16); }
      case  -46L: { return e_float({                                                                            142, 10854715, 20200371, 74224853, 51562500 }, -16); }
      case  -45L: { return e_float({                                                                            284, 21709430, 40400743, 48449707,  3125000 }, -16); }
      case  -44L: { return e_float({                                                                            568, 43418860, 80801486, 96899414,  6250000 }, -16); }
      case  -43L: { return e_float({                                                                           1136, 86837721, 61602973, 93798828, 12500000 }, -16); }
      case  -42L: { return e_float({                                                                           2273, 73675443, 23205947, 87597656, 25000000 }, -16); }
      case  -41L: { return e_float({                                                                           4547, 47350886, 46411895, 75195312, 50000000 }, -16); }
      case  -40L: { return e_float({                                                                                     9094, 94701772, 92823791, 50390625 }, -16); }
      case  -39L: { return e_float({                                                                                    18189, 89403545, 85647583,   781250 }, -16); }
      case  -38L: { return e_float({                                                                                    36379, 78807091, 71295166,  1562500 }, -16); }
      case  -37L: { return e_float({                                                                                    72759, 57614183, 42590332,  3125000 }, -16); }
      case  -36L: { return e_float({                                                                                   145519, 15228366, 85180664,  6250000 }, -16); }
      case  -35L: { return e_float({                                                                                   291038, 30456733, 70361328, 12500000 }, -16); }
      case  -34L: { return e_float({                                                                                   582076, 60913467, 40722656, 25000000 }, -16); }
      case  -33L: { return e_float({                                                                                  1164153, 21826934, 81445312, 50000000 }, -16); }
      case  -32L: { return e_float({                                                                                            2328306, 43653869, 62890625 }, -16); }
      case  -31L: { return e_float({                                                                                            4656612, 87307739, 25781250 }, -16); }
      case  -30L: { return e_float({                                                                                            9313225, 74615478, 51562500 }, -16); }
      case  -29L: { return e_float({                                                                                           18626451, 49230957,  3125000 }, -16); }
      case  -28L: { return e_float({                                                                                           37252902, 98461914,  6250000 }, -16); }
      case  -27L: { return e_float({                                                                                           74505805, 96923828, 12500000 }, -16); }
      case  -26L: { return e_float({                                                                                        1, 49011611, 93847656, 25000000 },  -8); }
      case  -25L: { return e_float({                                                                                        2, 98023223, 87695312, 50000000 },  -8); }
      case  -24L: { return e_float({                                                                                                  5, 96046447, 75390625 },  -8); }
      case  -23L: { return e_float({                                                                                                 11, 92092895, 50781250 },  -8); }
      case  -22L: { return e_float({                                                                                                 23, 84185791,  1562500 },  -8); }
      case  -21L: { return e_float({                                                                                                 47, 68371582,  3125000 },  -8); }
      case  -20L: { return e_float({                                                                                                 95, 36743164,  6250000 },  -8); }
      case  -19L: { return e_float({                                                                                                190, 73486328, 12500000 },  -8); }
      case  -18L: { return e_float({                                                                                                381, 46972656, 25000000 },  -8); }
      case  -17L: { return e_float({                                                                                                762, 93945312, 50000000 },  -8); }
      case  -16L: { return e_float({                                                                                                         1525, 87890625 },  -8); }
      case  -15L: { return e_float({                                                                                                         3051, 75781250 },  -8); }
      case  -14L: { return e_float({                                                                                                         6103, 51562500 },  -8); }
      case  -13L: { return e_float({                                                                                                        12207,  3125000 },  -8); }
      case  -12L: { return e_float({                                                                                                        24414,  6250000 },  -8); }
      case  -11L: { return e_float({                                                                                                        48828, 12500000 },  -8); }
      case  -10L: { return e_float({                                                                                                        97656, 25000000 },  -8); }
      case   -9L: { return e_float({                                                                                                        15312, 50000000 },  -8); }
      case   -8L: { return e_float({                                                                                                                 390625 },  -8); }
      case   -7L: { return e_float({                                                                                                                 781250 },  -8); }
      case   -6L: { return e_float({                                                                                                                1562500 },  -8); }
      case   -5L: { return e_float({                                                                                                                3125000 },  -8); }
      case   -4L: { return e_float({                                                                                                                6250000 },  -8); }
      case   -3L: { return e_float({                                                                                                               12500000 },  -8); }
      case   -2L: { return e_float({                                                                                                               25000000 },  -8); }
      case   -1L: { return e_float({                                                                                                               50000000 },  -8); }
      case    0L: { return e_float({                                                                                                                      1 },   0); }
      case    1L: { return e_float({                                                                                                                      2 },   0); }
      case    2L: { return e_float({                                                                                                                      4 },   0); }
      case    3L: { return e_float({                                                                                                                      8 },   0); }
      case    4L: { return e_float({                                                                                                                     16 },   0); }
      case    5L: { return e_float({                                                                                                                     32 },   0); }
      case    6L: { return e_float({                                                                                                                     64 },   0); }
      case    7L: { return e_float({                                                                                                                    128 },   0); }
      case    8L: { return e_float({                                                                                                                    256 },   0); }
      case    9L: { return e_float({                                                                                                                    512 },   0); }
      case   10L: { return e_float({                                                                                                                   1024 },   0); }
      case   11L: { return e_float({                                                                                                                   2048 },   0); }
      case   12L: { return e_float({                                                                                                                   4096 },   0); }
      case   13L: { return e_float({                                                                                                                   8192 },   0); }
      case   14L: { return e_float({                                                                                                                  16384 },   0); }
      case   15L: { return e_float({                                                                                                                  32768 },   0); }
      case   16L: { return e_float({                                                                                                                  65536 },   0); }
      case   17L: { return e_float({                                                                                                                 131072 },   0); }
      case   18L: { return e_float({                                                                                                                 262144 },   0); }
      case   19L: { return e_float({                                                                                                                 524288 },   0); }
      case   20L: { return e_float({                                                                                                                1048576 },   0); }
      case   21L: { return e_float({                                                                                                                2097152 },   0); }
      case   22L: { return e_float({                                                                                                                4194304 },   0); }
      case   23L: { return e_float({                                                                                                                8388608 },   0); }
      case   24L: { return e_float({                                                                                                               16777216 },   0); }
      case   25L: { return e_float({                                                                                                               33554432 },   0); }
      case   26L: { return e_float({                                                                                                               67108864 },   0); }
      case   27L: { return e_float({                                                                                                            1, 34217728 },   8); }
      case   28L: { return e_float({                                                                                                            2, 68435456 },   8); }
      case   29L: { return e_float({                                                                                                            5, 36870912 },   8); }
      case   30L: { return e_float({                                                                                                           10, 73741824 },   8); }
      case   31L: { return e_float({                                                                                                           21, 47483648 },   8); }
      case   32L: { return e_float({                                                                                                           42, 94967296 },   8); }
      case   33L: { return e_float({                                                                                                           85, 89934592 },   8); }
      case   34L: { return e_float({                                                                                                          171, 79869184 },   8); }
      case   35L: { return e_float({                                                                                                          343, 59738368 },   8); }
      case   36L: { return e_float({                                                                                                          687, 19476736 },   8); }
      case   37L: { return e_float({                                                                                                         1374, 38953472 },   8); }
      case   38L: { return e_float({                                                                                                         2748, 77906944 },   8); }
      case   39L: { return e_float({                                                                                                         5497, 55813888 },   8); }
      case   40L: { return e_float({                                                                                                        10995, 11627776 },   8); }
      case   41L: { return e_float({                                                                                                        21990, 23255552 },   8); }
      case   42L: { return e_float({                                                                                                        43980, 46511104 },   8); }
      case   43L: { return e_float({                                                                                                        87960, 93022208 },   8); }
      case   44L: { return e_float({                                                                                                       175921, 86044416 },   8); }
      case   45L: { return e_float({                                                                                                       351843, 72088832 },   8); }
      case   46L: { return e_float({                                                                                                       703687, 44177664 },   8); }
      case   47L: { return e_float({                                                                                                      1407374, 88355328 },   8); }
      case   48L: { return e_float({                                                                                                      2814749, 76710656 },   8); }
      case   49L: { return e_float({                                                                                                      5629499, 53421312 },   8); }
      case   50L: { return e_float({                                                                                                     11258999,  6842624 },   8); }
      case   51L: { return e_float({                                                                                                     22517998, 13685248 },   8); }
      case   52L: { return e_float({                                                                                                     45035996, 27370496 },   8); }
      case   53L: { return e_float({                                                                                                     90071992, 54740992 },   8); }
      case   54L: { return e_float({                                                                                                  1, 80143985,  9481984 },  16); }
      case   55L: { return e_float({                                                                                                  3, 60287970, 18963968 },  16); }
      case   56L: { return e_float({                                                                                                  7, 20575940, 37927936 },  16); }
      case   57L: { return e_float({                                                                                                 14, 41151880, 75855872 },  16); }
      case   58L: { return e_float({                                                                                                 28, 82303761, 51711744 },  16); }
      case   59L: { return e_float({                                                                                                 57, 64607523,  3423488 },  16); }
      case   60L: { return e_float({                                                                                                115, 29215046,  6846976 },  16); }
      case   61L: { return e_float({                                                                                                230, 58430092, 13693952 },  16); }
      case   62L: { return e_float({                                                                                                461, 16860184, 27387904 },  16); }
      case   63L: { return e_float({                                                                                                922, 33720368, 54775808 },  16); }
      case   64L: { return e_float({                                                                                               1844, 67440737,  9551616 },  16); }
      case   65L: { return e_float({                                                                                               3689, 34881474, 19103232 },  16); }
      case   66L: { return e_float({                                                                                               7378, 69762948, 38206464 },  16); }
      case   67L: { return e_float({                                                                                              14757, 39525896, 76412928 },  16); }
      case   68L: { return e_float({                                                                                              29514, 79051793, 52825856 },  16); }
      case   69L: { return e_float({                                                                                              59029, 58103587,  5651712 },  16); }
      case   70L: { return e_float({                                                                                             118059, 16207174, 11303424 },  16); }
      case   71L: { return e_float({                                                                                             236118, 32414348, 22606848 },  16); }
      case   72L: { return e_float({                                                                                             472236, 64828696, 45213696 },  16); }
      case   73L: { return e_float({                                                                                             944473, 29657392, 90427392 },  16); }
      case   74L: { return e_float({                                                                                            1888946, 59314785, 80854784 },  16); }
      case   75L: { return e_float({                                                                                            3777893, 18629571, 61709568 },  16); }
      case   76L: { return e_float({                                                                                            7555786, 37259143, 23419136 },  16); }
      case   77L: { return e_float({                                                                                           15111572, 74518286, 46838272 },  16); }
      case   78L: { return e_float({                                                                                           30223145, 49036572, 93676544 },  16); }
      case   79L: { return e_float({                                                                                           60446290, 98073145, 87353088 },  16); }
      case   80L: { return e_float({                                                                                        1, 20892581, 96146291, 74706176 },  24); }
      case   81L: { return e_float({                                                                                        2, 41785163, 92292583, 49412352 },  24); }
      case   82L: { return e_float({                                                                                        4, 83570327, 84585166, 98824704 },  24); }
      case   83L: { return e_float({                                                                                        9, 67140655, 69170333, 97649408 },  24); }
      case   84L: { return e_float({                                                                                       19, 34281311, 38340667, 95298816 },  24); }
      case   85L: { return e_float({                                                                                       38, 68562622, 76681335, 90597632 },  24); }
      case   86L: { return e_float({                                                                                       77, 37125245, 53362671, 81195264 },  24); }
      case   87L: { return e_float({                                                                                      154, 74250491,  6725343, 62390528 },  24); }
      case   88L: { return e_float({                                                                                      309, 48500982, 13450687, 24781056 },  24); }
      case   89L: { return e_float({                                                                                      618, 97001964, 26901374, 49562112 },  24); }
      case   90L: { return e_float({                                                                                     1237, 94003928, 53802748, 99124224 },  24); }
      case   91L: { return e_float({                                                                                     2475, 88007857,  7605497, 98248448 },  24); }
      case   92L: { return e_float({                                                                                     4951, 76015714, 15210995, 96496896 },  24); }
      case   93L: { return e_float({                                                                                     9903, 52031428, 30421991, 92993792 },  24); }
      case   94L: { return e_float({                                                                                    19807,  4062856, 60843983, 85987584 },  24); }
      case   95L: { return e_float({                                                                                    39614,  8125713, 21687967, 71975168 },  24); }
      case   96L: { return e_float({                                                                                    79228, 16251426, 43375935, 43950336 },  24); }
      case   97L: { return e_float({                                                                                   158456, 32502852, 86751870, 87900672 },  24); }
      case   98L: { return e_float({                                                                                   316912, 65005705, 73503741, 75801344 },  24); }
      case   99L: { return e_float({                                                                                   633825, 30011411, 47007483, 51602688 },  24); }
      case  100L: { return e_float({                                                                                  1267650, 60022822, 94014967,  3205376 },  24); }
      case  101L: { return e_float({                                                                                  2535301, 20045645, 88029934,  6410752 },  24); }
      case  102L: { return e_float({                                                                                  5070602, 40091291, 76059868, 12821504 },  24); }
      case  103L: { return e_float({                                                                                 10141204, 80182583, 52119736, 25643008 },  24); }
      case  104L: { return e_float({                                                                                 20282409, 60365167,  4239472, 51286016 },  24); }
      case  105L: { return e_float({                                                                                 40564819, 20730334,  8478945,  2572032 },  24); }
      case  106L: { return e_float({                                                                                 81129638, 41460668, 16957890,  5144064 },  24); }
      case  107L: { return e_float({                                                                              1, 62259276, 82921336, 33915780, 10288128 },  32); }
      case  108L: { return e_float({                                                                              3, 24518553, 65842672, 67831560, 20576256 },  32); }
      case  109L: { return e_float({                                                                              6, 49037107, 31685345, 35663120, 41152512 },  32); }
      case  110L: { return e_float({                                                                             12, 98074214, 63370690, 71326240, 82305024 },  32); }
      case  111L: { return e_float({                                                                             25, 96148429, 26741381, 42652481, 64610048 },  32); }
      case  112L: { return e_float({                                                                             51, 92296858, 53482762, 85304963, 29220096 },  32); }
      case  113L: { return e_float({                                                                            103, 84593717,  6965525, 70609926, 58440192 },  32); }
      case  114L: { return e_float({                                                                            207, 69187434, 13931051, 41219853, 16880384 },  32); }
      case  115L: { return e_float({                                                                            415, 38374868, 27862102, 82439706, 33760768 },  32); }
      case  116L: { return e_float({                                                                            830, 76749736, 55724205, 64879412, 67521536 },  32); }
      case  117L: { return e_float({                                                                           1661, 53499473, 11448411, 29758825, 35043072 },  32); }
      case  118L: { return e_float({                                                                           3323,  6998946, 22896822, 59517650, 70086144 },  32); }
      case  119L: { return e_float({                                                                           6646, 13997892, 45793645, 19035301, 40172288 },  32); }
      case  120L: { return e_float({                                                                          13292, 27995784, 91587290, 38070602, 80344576 },  32); }
      case  121L: { return e_float({                                                                          26584, 55991569, 83174580, 76141205, 60689152 },  32); }
      case  122L: { return e_float({                                                                          53169, 11983139, 66349161, 52282411, 21378304 },  32); }
      case  123L: { return e_float({                                                                         106338, 23966279, 32698323,  4564822, 42756608 },  32); }
      case  124L: { return e_float({                                                                         212676, 47932558, 65396646,  9129644, 85513216 },  32); }
      case  125L: { return e_float({                                                                         425352, 95865117, 30793292, 18259289, 71026432 },  32); }
      case  126L: { return e_float({                                                                         850705, 91730234, 61586584, 36518579, 42052864 },  32); }
      case  127L: { return e_float({                                                                        1701411, 83460469, 23173168, 73037158, 84105728 },  32); }
    }
  }
  else
  {
    return ef::pow(ef::two(), p);
  }
}

static e_float ElementaryTrans_Series::rootn_inv(const e_float& x, const std::int32_t p)
{
  // Compute the value of [1 / (rootn of x)] with n = p.

  // Generate the initial estimate using 1 / rootn.
  // Extract the mantissa and exponent for a "manual"
  // computation of the estimate.
  double        dd;
  std::int64_t  ne;

  ef::to_parts(x, dd, ne);

  // Adjust exponent and mantissa such that ne is an even power of p.
  while(ne % static_cast<std::int64_t>(p))
  {
    ++ne;
    dd /= 10.0;
  }
  
  // Estimate the one over the root using simple manipulations.
  const double one_over_rtn_d = ::pow(dd, -1.0 / static_cast<double>(p));

  // Set the result equal to the initial guess.
  e_float result(one_over_rtn_d, static_cast<std::int64_t>(-ne / p));

  static const std::int32_t double_digits10_minus_a_few = static_cast<std::int32_t>(static_cast<std::int32_t>(std::numeric_limits<double>::digits10) - static_cast<std::int32_t>(3));

  for(std::int32_t digits = double_digits10_minus_a_few; digits <= static_cast<std::int32_t>(ef::tolerance()); digits *= static_cast<std::int32_t>(2))
  {
    // Adjust precision of the terms.
    const std::int32_t new_prec = static_cast<std::int32_t>(digits * 2) + 10;

    result.precision(new_prec);

    // Perform the next iteration.
    e_float term = (((-ef::detail::pown_template(result, p) * x) + ef::one()) / p) + ef::one();

    term.precision(new_prec);

    result *= term;
  
  }

  result.precision(static_cast<std::int32_t>(ef::tolerance()));

  return result;
}

e_float ef::inv (const e_float& x) { return e_float(x).calculate_inv(); }
e_float ef::sqrt(const e_float& x) { return e_float(x).calculate_sqrt(); }

e_float ef::cbrt(const e_float& x)
{
  return ef::rootn(x, static_cast<std::int32_t>(3));
}

e_float ef::rootn(const e_float& x, const std::int32_t p)
{
  if(!ef::isfinite(x))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(p < static_cast<std::int32_t>(0))
  {
    return ef::rootn(ef::one() / x, static_cast<std::int32_t>(-p));
  }

  if((p == static_cast<std::int32_t>(0)) || ef::isneg(x))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }
  else if(p == static_cast<std::int32_t>(1))
  {
    return x;
  }
  else if(p == static_cast<std::int32_t>(2))
  {
    return ef::sqrt(x);
  }
  else if((p == static_cast<std::int32_t>(3)) && x.i_have_my_own_cbrt())
  {
    return e_float::my_own_cbrt(x);
  }

  const e_float rtn =  (x.i_have_my_own_rootn() ? e_float::my_own_rootn(x, static_cast<std::uint32_t>(p))
                                                : ElementaryTrans_Series::rootn_inv(x, p).calculate_inv());

  return rtn;
}

e_float ef::rootn_inverse(const e_float& x, const std::int32_t p)
{
  if(ef::isfinite(x) == false)
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(p < static_cast<std::int32_t>(0))
  {
    return detail::pown_template(x, static_cast<std::int32_t>(-p));
  }

  if((p == static_cast<std::int32_t>(0)) || ef::isneg(x))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }
  else if(p == static_cast<std::int32_t>(1))
  {
    return x;
  }
  else if(p == static_cast<std::int32_t>(2))
  {
    return ef::one() / ef::sqrt(x);
  }

  const e_float rtn_inv =  (x.i_have_my_own_rootn() ? ef::one() / e_float::my_own_rootn(x, static_cast<std::uint32_t>(p))
                                                    : ElementaryTrans_Series::rootn_inv(x, p));

  return rtn_inv;
}

e_float ef::exp(const e_float& x)
{
  if(x.i_have_my_own_exp())
  {
    return e_float::my_own_exp(x);
  }

  // Handle special arguments.
  if(ef::isnan(x))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(ef::isinf(x))
  {
    return ((!ef::isneg(x)) ? std::numeric_limits<e_float>::infinity() : ef::zero());
  }

  if(ef::iszero(x) || (x.order() < -ef::tolerance()))
  {
    return ef::one();
  }

  // Get local copy of argument and force it to be positive.
  const bool bo_x_is_neg = ef::isneg(x);

  const e_float xx = ((!bo_x_is_neg) ? x : -x);

  // Check the range of the argument.
  static const e_float maximum_arg_for_exp = std::numeric_limits<e_float>::max_exponent;

  if(xx > maximum_arg_for_exp)
  {
    // Overflow / underflow
    return ((!bo_x_is_neg) ? std::numeric_limits<e_float>::infinity() : ef::zero());
  }

  // Check for pure-integer arguments which can be either signed or unsigned.
  if(ef::isint(x))
  {
    return ef::detail::pown_template(ef::e(), ef::to_int64(x));
  }

  // The algorithm for exp has been taken from MPFUN.
  // exp(t) = [ (1 + r + r^2/2! + r^3/3! + r^4/4! ...)^p2 ] * 2^n
  // where p2 is a power of 2 such as 2048, r = t_prime / p2, and
  // t_prime = t - n*ln2, with n chosen to minimize the absolute
  // value of t_prime. In the resulting Taylor series, which is
  // implemented as a hypergeometric function, |r| is bounded by
  // ln2 / p2. For small arguments, no scaling is done.

  const bool b_scale = (xx.order() > static_cast<std::int64_t>(-4));

  // Compute the exponential series of the (possibly) scaled argument.
  e_float exp_series;

  if(b_scale)
  {
    // Compute 1 / ln2 as a warm-cached constant value.
    static const e_float one_over_ln2 = ef::one() / ef::ln2();

    const e_float nf = ef::integer_part(xx * one_over_ln2);

    // The scaling is 2^11 = 2048.
    const std::int32_t p2 = static_cast<std::int32_t>(std::uint32_t(1U) << 11);

    exp_series = ef::detail::pown_template(ef::hypergeometric_0f0((xx - (nf * ef::ln2())) / p2), static_cast<std::int64_t>(p2)) * ef::pow2(ef::to_int64(nf));
  }
  else
  {
    exp_series = ef::hypergeometric_0f0(xx);
  }

  return ((!bo_x_is_neg) ? exp_series : (ef::one() / exp_series));
}

namespace Log_Series
{
  static e_float AtOne(const e_float& x)
  {
    // This subroutine computes the series representation of Log[1 + x]
    // for small x without losing precision.

    // http://functions.wolfram.com/ElementaryFunctions/Log/26/01/01/

    return x * ef::hypergeometric_2f1( ef::one(), ef::one(), ef::two(), -x);
  }
}

e_float ef::log(const e_float& x)
{
  // Handle special arguments.
  if(ef::isnan(x) || ef::isneg(x) || ef::isinf(x))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(x.i_have_my_own_log())
  {
    return e_float::my_own_log(x);
  }

  if(ef::iszero(x))
  {
    return -std::numeric_limits<e_float>::infinity();
  }

  if(ef::isone(x))
  {
    return ef::zero();
  }

  // Make a local copy
  e_float xx = x;

  // Compute the delta of the argument compared to one.
  const e_float x_minus_one  = xx - ef::one();

  if(ef::near_one(xx))
  {
    return Log_Series::AtOne(x_minus_one);
  }

  // For large arguments, the value will be broken into two parts
  // in order to facilitate the convergence of the Newton iteration.
  const bool b_correction = (   (xx.order() > static_cast<std::int64_t>(+1000))
                             || (xx.order() < static_cast<std::int64_t>(-1000)));

  e_float correction;

  if(b_correction)
  {
    // The argument xx is of the form a * 10^b.
    // It will be broken into two parts: log(a) + b * log(10).
    const bool b_neg_exp = xx.order() < static_cast<std::int64_t>(0);

    // Remove a large power of ten from the argument. But be sure to leave the argument
    // large enough (or small enough) to avoid entering the near-one range.
    const std::int64_t n_order   = xx.order();
    const std::int64_t n_exp     = !b_neg_exp ? n_order : -n_order;
    const std::int64_t delta_exp = static_cast<std::int64_t>(n_exp - static_cast<std::int64_t>(8));

    // Convert the scaling power of ten to a string and subsequently to an e_float.
    const e_float ef_delta_exp("1E" + Util::lexical_cast(delta_exp));

    !b_neg_exp ? xx /= ef_delta_exp : xx *= ef_delta_exp;

    correction  = ef::ln10() * e_float(delta_exp);

    if(b_neg_exp)
    {
      correction = -correction;
    }
  }

  using std::fabs;
  using std::log;
  using std::log10;
  using std::pow;

  // Generate the initial estimate using double precision log combined with
  // the exponent for a "manual" computation of the initial iteration estimate.

  static const double lg10_d = log(10.0);

  static const std::int64_t n32_min = static_cast<std::int64_t>((std::numeric_limits<std::int32_t>::min)());
  static const std::int64_t n32_max = static_cast<std::int64_t>((std::numeric_limits<std::int32_t>::max)());

  // computation of the estimate.
  double        dd;
  std::int64_t  ne;
  ef::to_parts(xx, dd, ne);

  const double nd =
    ((ne < static_cast<std::int64_t>(0)) ? static_cast<double>(static_cast<std::int32_t>((std::max)(ne, n32_min)))
                                         : static_cast<double>(static_cast<std::int32_t>((std::min)(ne, n32_max))));

  const double dlog = log(dd) + (nd * lg10_d);

  const double d10  = ((!ef::iszero(dlog)) ? log10(fabs(dlog)) + 0.5 : 0.0);

  const std::int64_t  p10  =  (ef::ispos(dlog)  ? static_cast<std::int64_t>(d10) : static_cast<std::int64_t>(-d10));

  e_float log_val   = ((!ef::iszero(dlog)) ? e_float(dlog / pow(10.0, static_cast<double>(static_cast<std::int32_t>(p10))), p10)
                      : x_minus_one);

  // Newton-Raphson iteration
  static const std::int32_t double_digits10_minus_one = static_cast<std::int32_t>(static_cast<std::int32_t>(std::numeric_limits<double>::digits10) - static_cast<std::int32_t>(1));

  for(std::int32_t digits = double_digits10_minus_one; digits <= static_cast<std::int32_t>(ef::tolerance()); digits *= static_cast<std::int32_t>(2))
  {
    // Adjust precision of the terms.
    log_val.precision(static_cast<std::int32_t>(digits * static_cast<std::int32_t>(2)));
         xx.precision(static_cast<std::int32_t>(digits * static_cast<std::int32_t>(2)));

    const e_float exp_minus_log = ef::exp(-log_val);

    log_val += (xx * exp_minus_log) - ef::one();
  }

  return ((!b_correction) ? log_val : log_val + correction);
}

e_float ef::log10(const e_float& x)                   { return ef::log(x) / ef::ln10(); }
e_float ef::loga (const e_float& a, const e_float& x) { return ef::log(x) / ef::log(a); }
e_float ef::log1p(const e_float& x)                   { return Log_Series::AtOne(x); }

e_float ef::log1p1m2(const e_float& x)
{
  // This subroutine calculates the series representation of (1/2) Log[(1 + x) / (1 - x)]
  // for small x without losing precision.

  if(!ef::isfinite(x))
  {
    return x;
  }

  if((x <= ef::one_minus()) || (x >= ef::one()))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  // for values of x near one.
  const e_float x2 = x * x;
        e_float xn = x;

  e_float sum = xn;

  // Series representation of (1/2) Log[(1 + x) / (1 - x)] as given in
  // Schaum's Outlines: Mathematical Handbook of Formulas and Tables,
  // Second Edition, equation 22.8, page 136.
  for(std::int32_t n = static_cast<std::int32_t>(3); n < ef::max_iteration(); n += static_cast<std::int32_t>(2))
  {
    xn *= x2;

    const e_float term = xn / n;

    if(n > static_cast<std::int32_t>(20))
    {
      const std::int64_t order_check = static_cast<std::int64_t>(term.order() - sum.order());

      if(order_check < -ef::tolerance())
      {
        break;
      }
    }

    sum += term;
  }

  return sum;
}

e_float ef::pow(const e_float& x, const e_float& a)
{
  if((ef::isfinite(x) == false) || ef::isone(a))
  {
    return x;
  }

  if(ef::iszero(x))
  {
    return ef::one();
  }
  
  if(ef::iszero(a))
  {
    return ef::one();
  }

  const bool bo_a_isint = ef::isint(a);

  if(ef::isneg(x) && !bo_a_isint)
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(a <= ef::one_minus())
  {
    return ef::one() / ef::pow(x, -a);
  }

  const e_float      a_int = ef::integer_part(a);
  const std::int64_t an    = ef::to_int64(a_int);
  const e_float      da    = a - a_int;

  if(bo_a_isint)
  {
    return ef::detail::pown_template(x, an);
  }

  static const e_float nine_tenths = ef::nine() / static_cast<std::int32_t>(10);

  if(ef::ispos(x) && (x > ef::tenth()) && (x < nine_tenths))
  {
    if(ef::small_arg(a))
    {
      // Series expansion for small a.
      return ef::hypergeometric_0f0(a * ef::log(x));
    }
    else
    {
      // Series expansion for moderately sized x. Note that for large power of a,
      // the power of the integer part of a is calculated using the pown function.
      return ((an != static_cast<std::int64_t>(0)) ? ef::hypergeometric_1f0(-da, ef::one() - x) * ef::detail::pown_template(x, an)
                                                   : ef::hypergeometric_1f0( -a, ef::one() - x));
    }
  }
  else
  {
    // Series expansion for pow(x, a). Note that for large power of a, the power
    // of the integer part of a is calculated using the pown function.
    return ((an != static_cast<std::int64_t>(0)) ? ef::exp(da * ef::log(x)) * ef::detail::pown_template(x, an)
                                                 : ef::exp( a * ef::log(x)));
  }
}

e_float ef::pow(const e_float& b, const std::int64_t p)
{
  // Calculate (b ^ p).

  using floating_point_type = e_float;

  floating_point_type result;

  if     (p <  0) { result = 1 / pow(b, -p); }
  else if(p == 0) { result = floating_point_type(1U); }
  else if(p == 1) { result = b; }
  else if(p == 2) { result = b; result *= b; }
  else if(p == 3) { result = b * b; result *= b; }
  else if(p == 4) { result = b * b; result *= result; }
  else
  {
    result = floating_point_type(1U);

    floating_point_type y(b);

    for(std::uint64_t p_local = (std::uint64_t) p; p_local != 0U; p_local >>= 1U)
    {
      if((p_local & 1U) != 0U)
      {
        result *= y;
      }

      y *= y;
    }
  }

  return result;
}

e_float ef::sinh(const e_float& x)
{
  if(x.i_have_my_own_sinh())
  {
    return e_float::my_own_sinh(x);
  }

  if(!ef::isfinite(x))
  {
    return x;
  }

  e_float s;
  ef::sinhcosh(x, &s, static_cast<e_float*>(0U));
  return s;
}

e_float ef::cosh(const e_float& x)
{
  if(x.i_have_my_own_cosh())
  {
    return e_float::my_own_cosh(x);
  }

  if(ef::isfinite(x) == false)
  {
    return x;
  }

  e_float c;
  ef::sinhcosh(x, static_cast<e_float*>(0U), &c);
  return c;
}

void ef::sinhcosh(const e_float& x, e_float* const p_sinh, e_float* const p_cosh)
{
  if((ef::isfinite(x) == false) || ((p_sinh == nullptr) && (p_cosh == nullptr)))
  {
    return;
  }
  
  if(ef::iszero(x))
  {
    if(p_sinh != nullptr)
    {
      *p_sinh = ef::zero();
    }

    if(p_cosh != nullptr)
    {
      *p_cosh = ef::one();
    }

    return;
  }

  const e_float e_px = ef::exp(x);
  const e_float e_mx = ef::one() / e_px;

  if(p_sinh != nullptr) { *p_sinh  = (e_px - e_mx) / static_cast<std::int32_t>(2); }
  if(p_cosh != nullptr) { *p_cosh  = (e_px + e_mx) / static_cast<std::int32_t>(2); }
}

e_float ef::tanh(const e_float& x)
{
  if(x.i_have_my_own_tanh())
  {
    return e_float::my_own_tanh(x);
  }

  e_float c, s;
  ef::sinhcosh(x, &s, &c);
  return s * c.calculate_inv();
}

e_float ef::asinh(const e_float& x)
{
  if(x.i_have_my_own_asinh())
  {
    return e_float::my_own_asinh(x);
  }

  if(!ef::isfinite(x))
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(ef::iszero(x))
  {
    return ef::zero();
  }
  else
  {
    const e_float value = ef::log(ef::fabs(x) + ef::sqrt((x * x) + ef::one()));

    return ((ef::isneg(x) == false) ? value : -value);
  }
}

e_float ef::acosh(const e_float& x)
{
  if(x.i_have_my_own_acosh())
  {
    return e_float::my_own_acosh(x);
  }

  if(ef::isfinite(x) == false)
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(ef::isneg(x) || x < ef::one())
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  if(ef::isone(x))
  {
    return ef::one();
  }

  const e_float x_minus_one = x - ef::one();

  if(ef::small_arg(x_minus_one))
  {
    return   (ef::sqrt2() * ef::sqrt(x_minus_one))
           *  ef::hypergeometric_2f1( ef::half(),
                                      ef::half(),
                                      ef::three_half(),
                                     -x_minus_one / static_cast<std::int32_t>(2));
  }
  else
  {
    return ef::log(x + ef::sqrt((x * x) - ef::one()));
  }
}

e_float ef::atanh(const e_float& x)
{
  if(x.i_have_my_own_atanh())
  {
    return e_float::my_own_atanh(x);
  }

  if(!ef::isfinite(x))
  {
    return x;
  }

  const e_float xx = ef::fabs(x);
  
  if(xx >= ef::one())
  {
    return std::numeric_limits<e_float>::quiet_NaN();
  }

  const e_float value = (ef::small_arg(x) ?  ef::log1p1m2(x)
                                          : (ef::log((ef::one() + x) / (ef::one() - x)) / static_cast<std::int32_t>(2)));

  return ((!ef::isneg(xx)) ? value : -value);
}
