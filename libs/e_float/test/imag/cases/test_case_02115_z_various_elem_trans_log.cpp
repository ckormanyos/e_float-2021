
//          Copyright Christopher Kormanyos 1999 - 2021.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// This work is based on an earlier work:
// "Algorithm 910: A Portable C++ Multiple-Precision System for Special-Function Calculations",
// in ACM TOMS, {VOL 37, ISSUE 4, (February 2011)} (C) ACM, 2011. http://doi.acm.org/10.1145/1916461.1916469

// Automatically generated file
#include <array>

#include <boost/e_float/e_float_complex.hpp>
#include <boost/e_float/e_float_functions.hpp>

#include "../test_case_imag.h"

namespace test
{
  namespace imag
  {
    class TestCase_case_02115_z_various_elem_trans_log : public TestCaseImag
    {
    public:
      TestCase_case_02115_z_various_elem_trans_log() { }
      virtual ~TestCase_case_02115_z_various_elem_trans_log() { }
    private:
      virtual const std::string& name() const
      {
        static const std::string str("TestCase_case_02115_z_various_elem_trans_log");
        return str;
      }
      virtual void e_float_test(std::vector<ef::complex<e_float>>& data) const
      {
        data.clear();

        const ef::complex<e_float> x(ef::third(), ef::catalan());

        const ef::complex<e_float> a(ef::euler_gamma() * ef::thousand(),
                                     ef::phi() * ef::hundred());

        // N[Log[1/3 + (Catalan I)], 400]
        data.push_back(log(x));

        // N[Log[10, 1/3 + (Catalan I)], 400]
        data.push_back(log10(x));

        // N[Log[(EulerGamma 1000) + (GoldenRatio 100 I)], 400]
        data.push_back(log(a));

        // N[Log[(EulerGamma 1000) + (GoldenRatio 100 I), 1/3 + (Catalan I)], 400]
        data.push_back(log(x) / log(a));
      }
      virtual const std::vector<ef::complex<e_float>>& control_data() const
      {
        static const std::array<ef::complex<e_float>, 4U> a =
        {{
           ef::complex<e_float>(e_float("-0.025591870811422698449331696591353134924441976552044210634106862590445993564167530000362896278555011521332154997927284527807364329183227263762705404729213856451453046493689339560288472203735431940897298513774248257585304745129404874293126221019798396908117323796986170317828229483774407715165454554487145121152372089334045153782319971759810194463006051483984225008940985306866098494681833165536106673"),   e_float("+1.22177952594617041269030783738069497939966871532873640347144718742572531466936871396702783439014565776820264977726428958631189898021990750319582805025255600507958237988099187623497210984724720778465626432459720620941354057373787290054553786668469619700240106714448501382278987694693463051116513873368694487103755233516381724846930868367688582174210651819810840779600957069592721271646541164954993010220")),
           ef::complex<e_float>(e_float("-0.01111440827498177377810114598611518322800819855720403286905768709972542529958934024105157704923793511466614446925410099821623997127143787899891636389059036194283973977539237361949130180370587433141454025602117164662741129891573602490739603879348995765609607972325416565465107551856618215625717343628157628295478831280863998961527516930864680510937893482863141576856626279681054760872339350407178815946"), e_float("+0.5306121062207927031145013667651180547883689551094694998407205688086927767266465891312559613294757728565333848317402494705779593868443754442800883395864843001548945698876847129498536696861812944146747023696028567266461311109093952502750508164436816450229075520960301067353576889632934823595203588702046142666534359924761897195081465243226523257917007997327635344619679698776288207978874707545121500497")),
           ef::complex<e_float>(e_float("+6.3960375594310439723046025285750907318594267511636513535830424172071973014472646167207641286293329762268919162580804169738881451376554153697027262888535658468592373193902035418870757465765323463227648847183381104921409156024235985398978411557167750501485722304125042749193378873619148970710252435382987929444217826416436481613571908536645230780606417832387011400563038322268337249224369810422565919852"),  e_float("+0.27330268965102925653814256569447618316052582300717528049185617209368558030409956363886036329605146804362355395492430726923788979560461695187591124030337731587049663854759740320406618097772268567983699196026345980780211699147890014092543981248772204921293693612020190624022368416738081270876538798024356449369015385197200958036669652486701678474999597558042429079516286746584631972705498863991490545245")),
           ef::complex<e_float>(e_float("+0.0041535502097818609744929346310910951852401627364817705563204603618429345082298188422846791345274612039400923961389611323659516933445751022167742936640789887970816581788533400251295320819892754388492289177811438780067461917841600634310753988174828241213445568176913995953208446009174149736368279693623979289547641011209937765975815265835943646359022342339985904298379910072234638861732497352214894501"),  e_float("+0.1908438370100531718411100700757374699573855999468009431214952662057235049252846160762201921215033115060375505117268871249741390377950572166847371956584371254073651551792192667267008449357266974012865852036959570916727275844985998222132961903217301738373914174028927505221783506162494209707024003885676439463822352874727621648819629966469691490963185828660633486671571747013220559840035931501797234241")),
        }};

        static const std::vector<ef::complex<e_float>> v(a.cbegin(), a.cend());

        return v;
      }
    };

    bool test_case_02115_z_various_elem_trans_log(const bool b_write_output)
    {
      return TestCase_case_02115_z_various_elem_trans_log().execute(b_write_output);
    }
  }
}
