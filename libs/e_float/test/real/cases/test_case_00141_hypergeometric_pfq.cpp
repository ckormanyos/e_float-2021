

//          Copyright Christopher Kormanyos 1999 - 2021.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// This work is based on an earlier work:
// "Algorithm 910: A Portable C++ Multiple-Precision System for Special-Function Calculations",
// in ACM TOMS, {VOL 37, ISSUE 4, (February 2011)} (C) ACM, 2011. http://doi.acm.org/10.1145/1916461.1916469

// Automatically generated file
#include <array>

#include <e_float/e_float_functions.h>

#include <../test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00141_hypergeometric_pfq : public TestCaseReal
    {
    public:
      TestCase_case_00141_hypergeometric_pfq() { }
      virtual ~TestCase_case_00141_hypergeometric_pfq() { }
    private:
      virtual const std::string& name() const
      {
        static const std::string str("TestCase_case_00141_hypergeometric_pfq");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(9U);

        const std::deque<e_float>
        p
        (
          { e_float(3U) / 7U, e_float(3U) / 8U, e_float(3U) / 9U, e_float(3U) / 10U }
        );

        const std::deque<e_float>
        q
        (
          { e_float(7U) / 13U, e_float(7U) / 14U, e_float(7U) / 15U, e_float(7U) / 16U, e_float(7U) / 17U }
        );

        for(std::int32_t k = static_cast<std::int32_t>(0); k < static_cast<std::int32_t>(data.size()); k++)
        {
          const e_float x = ef::ln2() / (k + 1);
          data[static_cast<std::size_t>(k)] = ef::hypergeometric_pfq(p, q, x);
        }
      }
      virtual const std::vector<e_float>& control_data() const
      {
        static const std::array<e_float, 9U> a =
        {{
           e_float("1.58359631399837491509125635713991517359777088322179452855128058025568499852093386489717186786120774518779915561970412114040299925572186212919276719260025382703983012214858531287143591586758623848901684102370567561983607918079752714333207697814052341711374985140700125387610131746836827597736483927601632598848864603142750562099322319901610790640400622325813204821157182060921611428184297273610517811808129333425990163033520231061843670675123410612833927944481618657631435079424318087510311032263682655"),
           e_float("1.26806614395193372410937678447170037305641822288880853979646292695328965966819643425752619410363799907942051102256363618496724152879955771025641326245141796695597715121879925087967950392621749896000537503114586209234192120371177798199536415721799021030049175318587244714519043234332836915777445445635524387154418139886867893609188448004671293735754503615141780742868391839506903005805658425333507122155283288551673462631061375948865467333833181537725874342297136308299718868784841949570382868012499321"),
           e_float("1.17370062779857334613620491945490516993236609441381705709799762597713917850608925128206431177653571373322431797906641483541139529459774341162476938026938307524697274390135774879904669383366532207993849337129712005027229934864422789602476695007010740442644746792558425658951578787026198194913716425540648686849098975228404304982058204564186552932733470297608565781612953408842528181912613981539680217746762411910418200447921985011733007127416000912671240323222939313465307905055404956922279911803655078"),
           e_float("1.12843255359932612325391825698121765174597207260250951508446079332360246368877996508943715495053566811435731446079466894080958491736705128258880890746610204373443241453030830475516969925052745672147509941536830939537442359837480711291280422855911567018965245804330968800218708381151784472317076437752363528343130101287735415988561442398412705348171304508733058182820726802602995747987658468987438569401732666296598092620306962577580518557184928163513285326532546635017218405749610373495742599741141677"),
           e_float("1.10187050937769553419847702770841444928339832734097936933559917726482720033919910491236643159259951360049509806108254356061589349867412095680697252650457028413868137139358101888724050695881195057609259829992967340804476106063825531720902776187141997520370958031297047730168549825323508820844823533846874291734928882905435235368392836599204194229029484557933324628547898346822333982052248557512175090744107554841099517503788371820118785453631343994048489397199028632371026219839628131729785462044703669"),
           e_float("1.08440880902450394698883238243494540199378114380125611523548289263231165584466572321635771858293095088363333394187510672001135994317850768541235930347833858540010017936942160356297021765506378630027458779444577025076689007625341751371105494192903419708654163564645916298343210583978135087833020926905697420462174925375654420898267641381516824127057739610168421520355001289077377489813860326513978918891823603476319873227827973858409808296478301216890795680856471161698298636830865153622959675834988400"),
           e_float("1.07205582670935932949146342200302230500174323657957219880819467586198948982573574518188750864449267897218643073760951085287007386443367076718365612923051711757049211168452118753053996133874793539382143414609548575014964676359640888797785122141692228627755900253867313507679002835655533126026544531658078401289492075304332468175218156083820099907453533130921653621062772415133843769881216887290122196833216965211078327372560600293929184858705631725325810211637002814540630428055822991154628891430014014"),
           e_float("1.06285615246442026706934932771665918285326790475452513574685534713851025653897860489129919467893100574251960568272944685085492246151622214126223453276205980431291563173512282404225425299880174155023834882209636389393952525743069326973324170635894035732286973918826288929741735694587004539640897280536689890410945115098467041111677282549787119630550151639207632273185270914484564869670222892566838425035949003278279090500296819601986761593904890649311767745737059842009620217144477314057095680684342921"),
           e_float("1.05573924097500249820818393651275796259368055926968073918040459717892197021304722252782759001293720139096166306482216565451920385302222323357639599301781016169578760159227992076361208549640385837281967437348429686336508220035055458728730010260665386000606120001927479190618607712567226772837825276829661556397543801955095959959869396952896593820808669692447004012636048358864973605771504739449759735987745125234858791231891496213137867399767902477284957158690735334067383160476079014342001341827705056")
        }};
        static const std::vector<e_float> v(a.cbegin(), a.cend());
        return v;
      }
    };

    bool test_case_00141_hypergeometric_pfq(const bool b_write_output)
    {
      return TestCase_case_00141_hypergeometric_pfq().execute(b_write_output);
    }
  }
}
