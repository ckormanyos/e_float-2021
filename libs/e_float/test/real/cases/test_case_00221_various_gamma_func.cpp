
//          Copyright Christopher Kormanyos 1999 - 2021.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// This work is based on an earlier work:
// "Algorithm 910: A Portable C++ Multiple-Precision System for Special-Function Calculations",
// in ACM TOMS, {VOL 37, ISSUE 4, (February 2011)} (C) ACM, 2011. http://doi.acm.org/10.1145/1916461.1916469

// Automatically generated file
#include <array>

#include <e_float/e_float_complex.h>
#include <e_float/e_float_functions.h>
#include <e_float/e_float_functions_complex.h>

#include <../test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00221_various_gamma_func : public TestCaseReal
    {
    public:
      TestCase_case_00221_various_gamma_func() { }
      virtual ~TestCase_case_00221_various_gamma_func() { }
    private:
      virtual const std::string& name() const
      {
        static const std::string str("TestCase_case_00221_various_gamma_func");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::binomial(  20U,   10U));
        data.push_back(ef::binomial( 200U,  100U));
        data.push_back(ef::binomial(2000U, 1000U));
        data.push_back(ef::binomial(  20U, ef::pi()));
        data.push_back(ef::binomial( 200U, ef::euler_gamma()));
        data.push_back(ef::binomial(ef::pi(), 20U));
        data.push_back(ef::binomial(ef::euler_gamma(), 200U));
        data.push_back(ef::binomial(ef::pi(), ef::euler_gamma()));
        data.push_back(ef::real(ef::pochhammer(ef::complex<e_float>(ef::third(), ef::catalan()), ef::complex<e_float>(ef::pi(), ef::euler_gamma()))));
        data.push_back(ef::imag(ef::pochhammer(ef::complex<e_float>(ef::third(), ef::catalan()), ef::complex<e_float>(ef::pi(), ef::euler_gamma()))));
        data.push_back(ef::real(ef::pochhammer(ef::complex<e_float>(ef::third(), ef::catalan()), 17U)));
        data.push_back(ef::imag(ef::pochhammer(ef::complex<e_float>(ef::third(), ef::catalan()), 17U)));
      }
      virtual const std::vector<e_float>& control_data() const
      {
        static const std::array<e_float, 12U> a =
        {{
           e_float("184756."),
           e_float("9.054851465610328116540417707748416387450458967541333684132e58"),
           e_float("2.0481516269894897143351625029808250443964248879813970338203826376717481862020837558289329941826102062014647663199980236924154817980045247920180475497692615785630128966343206471485115239525165122776858861153954625614790737866846415444453361761377007385567381458963007130651045595951447988874620636871851455182855117316627625366377308468293225538904974385948143175503078379644437081008516372482746279142e600"),
           e_float("1426.2875030516824045190474871275847729610929647117178800653022745251962712249707445157273933966843872568527224787237025554131878339600530478719032313554763427360721488756093392253813229658100564292171732133350532208227507093154629266943286522621238015096412669116807540438027251666868309539712883280049119239645930336330076174743206247596649403559443674627228992616061900507179654878296462325149959779"),
           e_float("23.905807241512394798031322623498819327532394382354962100257335309915288947122100144010787022343352490102943174682028714280647066212565849981503239376815427267462681968008266840836806076583172116229479815702276779531595620821074308701024028942321603306154794376868053004626539188760291493888402142780216534904313067460585404963770412097706832916711745592577404899046617653259420661910864245282648095687"),
           e_float("5.6963816832640242844919552652159138827866213713172597878482401725674355827471357835225369384013178060362647450507731446625889429203180720953909308392113979081629970117792139947181063526228392980246705188456776319936934238547470466701633490045271558938144816898886029024857117477476768344525517620614855179138850987077688445942369527715042007920808536944663306693900047804831548532207767701883374488226e-6"),
           e_float("-0.000064813661381704035413125766070598403349380018125924589067776393730670039970238017825688419996782474898665714347544897878075841533091153265283467434502901775742227453591410203041876567155233659662991883938956472692298625514100086450383537348892987257000215046403944202337418613133429680795301438175913399121145475000015938979999544284889667921479247850203646268054003574883503064715472183419132372473871"),
           e_float("2.2591590103167630190452733430384211373521343658823833761813141983667173059953914970939256890295005366854944600940834213197002027822306748818548861205594799774484976985539727592377899452702878200835064299641918223375658027834460435738482686901141547787547253595277235131884714790921874824761713332395413378999045488707756309020327335384455949550882941358601905770319924198306108918970861855442062137397"),
           e_float("-3.6215162717920215625633717539208633118712867642757483374687955271130098748057889599659215315432663567235808345053657354414534961323156841124935122897289092755071176642527846013059555786399905794977356653285448791884290399613283798008262455259167867694210264313203835509563061698853660854598708760557829561095207959771714436896137642117702494838972128190061371150274941459507543811480857300071275836566"),
           e_float("0.83099788602765992595492178898464247715558000072537423822967749809394629317938691902002837282366615461021279628533093592288740494116137715229135123184288777457135266694834120576993810702408416134641940525396688798005808868948609128732886975573235337577633420194806096431753278615961754669345692462061813104888472234149917217092389317885470686324503044448468709127256522772934226361651395368905947057546"),
           e_float("-6.7195625256450753067370125862972561246633315487427733443556289130561824093050570570502135154581091356227792305458885622653519570699121792170020555378302467880293629322684263401102408762148658601687039807387722039255615124660734869847882817537790378472317878152346927507280453423670226329304049733802574304332827772002207926333958933086568346833578245386822028638114547214217036296604212098373211628956e13"),
           e_float("-5.3151927138507502109590981067680725465842152964099134846973687497026217487364530057872799562136824970616293018797829836534101401830288383550955342524270155305699456811988584739699887666310159610776467204263451070037657070761698698983071008397320844517196873980882515586153126567805935301582564276154321299249086930037049432662250081277169327052253061426296436412837509883624088691560327457829392045447e13"),
        }};
        static const std::vector<e_float> v(a.cbegin(), a.cend());
        return v;
      }
    };

    bool test_case_00221_various_gamma_func(const bool b_write_output)
    {
      return TestCase_case_00221_various_gamma_func().execute(b_write_output);
    }
  }
}
