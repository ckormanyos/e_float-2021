
//          Copyright Christopher Kormanyos 1999 - 2021.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// This work is based on an earlier work:
// "Algorithm 910: A Portable C++ Multiple-Precision System for Special-Function Calculations",
// in ACM TOMS, {VOL 37, ISSUE 4, (February 2011)} (C) ACM, 2011. http://doi.acm.org/10.1145/1916461.1916469

// Automatically generated file
#include <array>

#include <boost/e_float/e_float_functions.hpp>

#include "../test_case_real.h"

namespace test
{
  namespace real
  {
    class TestCase_case_00071_various_int_func : public TestCaseReal
    {
    public:
      TestCase_case_00071_various_int_func() { }
      virtual ~TestCase_case_00071_various_int_func() { }
    private:
      virtual const std::string& name() const
      {
        static const std::string str("TestCase_case_00071_various_int_func");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::factorial2(-1301));
        data.push_back(ef::factorial2(-2501));
        data.push_back(ef::bernoulli(1U));
        data.push_back(ef::bernoulli(10000U));
        data.push_back(ef::bernoulli(10001U));
        data.push_back(ef::bernoulli(10002U));
      }
      virtual const std::vector<e_float>& control_data() const
      {
        static const std::array<e_float, 6U> a =
        {{
           e_float("1.1960437865004289743670703046885800334532353988066498666560446037134474180618013020679580670427343007973964442506222374632473883275065117542456136817480918655718713922035509613287300015693362743548860645383343905808534942593435341632264363838837420990328797509263529572895033456430440933830848863325058358079439556772734263572565683517653891499191749541369545218245008167397838822840824375022978784547e-1742"),
           e_float("1.9615122181406584390757837457106691277493346098907191803612067078285040589854421424165742458938372893338538819691491226987892216249244951414530342301558870460396985476380818870495179690600343813063107756695719471847716118384932064403979415768882098115430402739059419127060048721841773049669437575413661238017384818686187001817676510584898763723785047288594077418693936634182700817918488212564662606095e-3705"),
           e_float("-0.5"),
           e_float("-9.0494239636094805005292414430835356053321039287156591766434345966849442930839829578482912011317913028203768523193958868838069975282436625385065427529164975854427869046950197884540178673652136472892820016163848818994153741228268434408582143896855256119344731862714343831822917455122107469980595984331347720243734926933144200474534596617828144741534545159043636679499254825809851574177362202504789517711e27677"),
           e_float("0"),
           e_float("2.2929335877909938898764082526150388027539049441712304402372126974727317758355323237101312702186929567941949324652339477243731302247995137894839991449140238197839294027132444548719989963332282547273495902914538533018914699572641511688221552250493054116142392002883708448649667808243880740106984491455507443678058968857183654247921532215416841507446795631067564451808066675761947805892768271228724695063e27684"),
        }};
        static const std::vector<e_float> v(a.cbegin(), a.cend());
        return v;
      }
    };

    bool test_case_00071_various_int_func(const bool b_write_output)
    {
      return TestCase_case_00071_various_int_func().execute(b_write_output);
    }
  }
}
